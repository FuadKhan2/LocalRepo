# -*- coding: utf-8 -*-
"""2019331513_lab_report_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bA1BbrfF_5cUylzzdkad6Vp-OtBHmLBP
"""

! pip install kaggle

!pip install opencv-python-headless

from google.colab import drive
drive.mount('/content/drive')

! mkdir ~/.kaggle

!cp '/content/drive/MyDrive/Colab Notebooks/kaggle_credentials/kaggle.json' ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! mkdir /content/kaggle_data

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# ls /
# if [ ! -d "/root/.kaggle/kaggle.json" ]; then
#   echo "$DIRECTORY does not exist."
# fi

! kaggle datasets download -p /content/kaggle_data tenxengineers/denoising-dataset-multiple-iso-levels

! unzip /content/kaggle_data/denoising-dataset-multiple-iso-levels.zip -d /content/kaggle_data/denoising-dataset-multiple-iso-levels/

import os
import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive
from google.colab.patches import cv2_imshow
import cv2

# Create a list of image paths
txt_files = []
for root, dirs, files in os.walk("/content/kaggle_data/denoising-dataset-multiple-iso-levels/AlphaISP - Denoising Dataset/AlphaISP - Denoising Dataset"):
    for file in files:
        if file.endswith("AlphaISP_2592x1536_8bits_Scene44.png"):
            txt_files.append(os.path.join(root, file))

def show_image(title, image):
    plt.figure(figsize=(10, 10))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis('off')
    plt.show()

from skimage import io

for noisy_image in txt_files:
  print(noisy_image)
  plt.figure()
  plt.imshow(io.imread(noisy_image))
plt.show()

# Process each image in the txt_files list
for image_path in txt_files:
    # Load the image
    image = cv2.imread(image_path)
    show_image('Original Image', image)

    # 1. Noise Reduction using Addition
    noise = np.random.randint(0, 25, image.shape, dtype=np.uint8)
    noisy_image = cv2.add(image, noise)
    show_image('Noisy Image', noisy_image)

    # 2. Change Detection using Subtraction
    # Assume the corresponding clean image is available at the same location with a different name
    dirty_image_path = image_path.replace("AlphaISP_2592x1536_8bits_Scene44.png", "AlphaISP_2592x1536_8bits_Scene44_dirty.png")
    if os.path.exists(dirty_image_path):
        dirty_image = cv2.imread(dirty_image_path)
        show_image('Modified Image for Change Detection', dirty_image)

        # Compute the absolute difference between the noisy and clean images
        change_detected = cv2.subtract(image, dirty_image)
        show_image('Change Detected', change_detected)
    else:
        print(f"Clean image not found for {image_path}")
        change_detected = None

    # 3. Masking using Multiplication
    # Create a binary mask
    mask = np.zeros(image.shape[:2], dtype="uint8")
    cv2.rectangle(mask, (700, 0), (1250, 240), 255, -1)  # Adjusted coordinates
    show_image('Mask', mask)

    # Apply the mask to the noisy image
    masked_image = cv2.bitwise_and(noisy_image, noisy_image, mask=mask)
    show_image('Masked Noisy Image', masked_image)

    # Apply the mask to the clean image for comparison
    if change_detected is not None:
        masked_dirty_image = cv2.bitwise_and(dirty_image, dirty_image, mask=mask)
        show_image('Masked Modified Image', masked_dirty_image)

    break

print("Processing completed.")